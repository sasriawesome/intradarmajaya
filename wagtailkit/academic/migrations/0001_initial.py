# Generated by Django 2.2.10 on 2020-02-15 14:42

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import modelcluster.fields
import mptt.fields
import uuid
import wagtail.core.blocks
import wagtail.core.fields
import wagtail.search.index
import wagtailkit.persons.models.extra


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='Date created')),
                ('date_modified', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='Date modified')),
                ('is_deleted', models.BooleanField(default=False, editable=False)),
                ('reg_number', models.PositiveIntegerField(blank=True, editable=False, null=True, verbose_name='Register number')),
                ('inner_id', models.CharField(blank=True, editable=False, max_length=50, null=True, unique=True, verbose_name='Inner ID')),
                ('name', models.CharField(max_length=256, verbose_name='Name')),
                ('teaching_method', models.CharField(max_length=256, verbose_name='Teaching method')),
                ('level', models.CharField(choices=[('0', 'SD'), ('1', 'SMP'), ('2', 'SMA'), ('3', 'D1'), ('4', 'D2'), ('5', 'D3'), ('6', 'D4'), ('7', 'S1'), ('8', 'S2'), ('9', 'S3')], default=wagtailkit.persons.models.extra.KKNILevel('7'), max_length=3, verbose_name='Level')),
                ('year_offered', models.CharField(choices=[('1', '1'), ('2', '2'), ('3', '3'), ('4', '4')], default='1', max_length=3, verbose_name='Year Offered')),
                ('description', wagtail.core.fields.RichTextField(blank=True, max_length=10000, null=True, verbose_name='Description')),
                ('has_lpu', models.BooleanField(default=True, help_text='Lecture Program Unit a.k.a SAP', verbose_name='Has LPU')),
                ('has_dictate', models.BooleanField(default=True, verbose_name='Has dictate')),
                ('has_teaching_material', models.BooleanField(default=True, verbose_name='Has teaching material')),
                ('has_practice_program', models.BooleanField(default=True, verbose_name='Has practice program')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active status')),
            ],
            options={
                'verbose_name': 'Course',
                'verbose_name_plural': 'Courses',
                'ordering': ('inner_id',),
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='CourseGroup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='Date created')),
                ('date_modified', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='Date modified')),
                ('is_deleted', models.BooleanField(default=False, editable=False)),
                ('code', models.CharField(max_length=256, unique=True, verbose_name='Code')),
                ('name', models.CharField(max_length=512, verbose_name='Name')),
                ('alias', models.CharField(blank=True, max_length=512, null=True, verbose_name='Alias')),
            ],
            options={
                'verbose_name': 'Course Group',
                'verbose_name_plural': 'Course Groups',
                'ordering': ('code',),
            },
        ),
        migrations.CreateModel(
            name='CourseType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='Date created')),
                ('date_modified', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='Date modified')),
                ('is_deleted', models.BooleanField(default=False, editable=False)),
                ('code', models.CharField(max_length=256, unique=True, verbose_name='Code')),
                ('name', models.CharField(max_length=512, verbose_name='Name')),
                ('alias', models.CharField(blank=True, max_length=512, null=True, verbose_name='Alias')),
            ],
            options={
                'verbose_name': 'Course Type',
                'verbose_name_plural': 'Course Types',
                'ordering': ('code',),
            },
        ),
        migrations.CreateModel(
            name='Curriculum',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='Date created')),
                ('date_modified', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='Date modified')),
                ('is_deleted', models.BooleanField(default=False, editable=False)),
                ('code', models.CharField(max_length=256, unique=True, verbose_name='Code')),
                ('year', models.CharField(choices=[('2010', '2010'), ('2011', '2011'), ('2012', '2012'), ('2013', '2013'), ('2014', '2014'), ('2015', '2015'), ('2016', '2016'), ('2017', '2017'), ('2018', '2018'), ('2019', '2019'), ('2020', '2020'), ('2021', '2021'), ('2022', '2022'), ('2023', '2023'), ('2024', '2024'), ('2025', '2025'), ('2026', '2026'), ('2027', '2027'), ('2028', '2028'), ('2029', '2029')], default='2019', max_length=4, verbose_name='Year')),
                ('name', models.CharField(max_length=256, verbose_name='Name')),
                ('sks_graduate', models.PositiveIntegerField(default=0, verbose_name='SKS graduate')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
            ],
            options={
                'verbose_name': 'Curriculum',
                'verbose_name_plural': 'Curriculums',
            },
        ),
        migrations.CreateModel(
            name='SchoolYear',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='Date created')),
                ('date_modified', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='Date modified')),
                ('is_deleted', models.BooleanField(default=False, editable=False)),
                ('code', models.CharField(editable=False, max_length=256, unique=True, verbose_name='Code')),
                ('year_start', models.IntegerField(choices=[(2010, '2010'), (2011, '2011'), (2012, '2012'), (2013, '2013'), (2014, '2014'), (2015, '2015'), (2016, '2016'), (2017, '2017'), (2018, '2018'), (2019, '2019'), (2020, '2020'), (2021, '2021'), (2022, '2022'), (2023, '2023'), (2024, '2024'), (2025, '2025'), (2026, '2026'), (2027, '2027'), (2028, '2028'), (2029, '2029'), (2030, '2030'), (2031, '2031'), (2032, '2032'), (2033, '2033'), (2034, '2034'), (2035, '2035'), (2036, '2036'), (2037, '2037'), (2038, '2038'), (2039, '2039'), (2040, '2040'), (2041, '2041'), (2042, '2042'), (2043, '2043'), (2044, '2044'), (2045, '2045'), (2046, '2046'), (2047, '2047'), (2048, '2048'), (2049, '2049')], default=2019, verbose_name='Year Start')),
                ('year_end', models.IntegerField(choices=[(2010, '2010'), (2011, '2011'), (2012, '2012'), (2013, '2013'), (2014, '2014'), (2015, '2015'), (2016, '2016'), (2017, '2017'), (2018, '2018'), (2019, '2019'), (2020, '2020'), (2021, '2021'), (2022, '2022'), (2023, '2023'), (2024, '2024'), (2025, '2025'), (2026, '2026'), (2027, '2027'), (2028, '2028'), (2029, '2029'), (2030, '2030'), (2031, '2031'), (2032, '2032'), (2033, '2033'), (2034, '2034'), (2035, '2035'), (2036, '2036'), (2037, '2037'), (2038, '2038'), (2039, '2039'), (2040, '2040'), (2041, '2041'), (2042, '2042'), (2043, '2043'), (2044, '2044'), (2045, '2045'), (2046, '2046'), (2047, '2047'), (2048, '2048'), (2049, '2049')], default=2020, verbose_name='Year End')),
            ],
            options={
                'verbose_name': 'School Year',
                'verbose_name_plural': 'School Years',
            },
        ),
        migrations.CreateModel(
            name='Syllabus',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='Date created')),
                ('date_modified', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='Date modified')),
                ('is_deleted', models.BooleanField(default=False, editable=False)),
                ('reg_number', models.PositiveIntegerField(blank=True, editable=False, null=True, verbose_name='Register number')),
                ('inner_id', models.CharField(blank=True, editable=False, max_length=50, null=True, unique=True, verbose_name='Inner ID')),
                ('title', models.CharField(max_length=256, verbose_name='Name')),
                ('description', wagtail.core.fields.RichTextField(max_length=10000, verbose_name='Description')),
                ('body', wagtail.core.fields.StreamField([('topic', wagtail.core.blocks.RichTextBlock(group=True, label='Topic')), ('competency', wagtail.core.blocks.RichTextBlock(group=True, label='Competency')), ('learning_material', wagtail.core.blocks.StructBlock([('name', wagtail.core.blocks.CharBlock()), ('description', wagtail.core.blocks.CharBlock()), ('type', wagtail.core.blocks.ChoiceBlock(choices=[('software', 'Software'), ('hardware', 'Hardware'), ('framework', 'Framework'), ('misc', 'Misc')], icon='cogs'))])), ('reference', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock()), ('description', wagtail.core.blocks.TextBlock()), ('type', wagtail.core.blocks.ChoiceBlock(choices=[('book', 'Book'), ('journal', 'Journal'), ('article', 'Article'), ('sourcecode', 'Source Code'), ('documentation', 'Documentation'), ('misc', 'Misc')], icon='cogs'))]))])),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='syllabuses', to='academic.Course', verbose_name='Course')),
                ('creator', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
            ],
            options={
                'verbose_name': 'Syllabus',
                'verbose_name_plural': 'Syllabuses',
            },
        ),
        migrations.CreateModel(
            name='ResourceManagementUnit',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='Date created')),
                ('date_modified', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='Date modified')),
                ('is_deleted', models.BooleanField(default=False, editable=False)),
                ('code', models.SlugField(max_length=256, unique=True, verbose_name='Code')),
                ('number', models.CharField(max_length=2, verbose_name='Number')),
                ('name', models.CharField(max_length=256, verbose_name='Name')),
                ('status', models.CharField(choices=[('1', 'University'), ('2', 'Faculty'), ('3', 'Major'), ('4', 'Program Study')], default='4', max_length=3, verbose_name='Status')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('creator', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='academic.ResourceManagementUnit', verbose_name='Parent')),
            ],
            options={
                'verbose_name': 'Resource Management Unit',
                'verbose_name_plural': 'Resource Management Unit',
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='LectureProgram',
            fields=[
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='Date created')),
                ('date_modified', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='Date modified')),
                ('is_deleted', models.BooleanField(default=False, editable=False)),
                ('reg_number', models.PositiveIntegerField(blank=True, editable=False, null=True, verbose_name='Register number')),
                ('inner_id', models.CharField(blank=True, editable=False, max_length=50, null=True, unique=True, verbose_name='Inner ID')),
                ('programs', wagtail.core.fields.StreamField([('program_unit', wagtail.core.blocks.StructBlock([('session', wagtail.core.blocks.IntegerBlock()), ('duration', wagtail.core.blocks.IntegerBlock()), ('topic', wagtail.core.blocks.RichTextBlock()), ('competency', wagtail.core.blocks.RichTextBlock())]))])),
                ('creator', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('syllabus', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='lecture_programs', to='academic.Syllabus', verbose_name='Syllabus')),
            ],
            options={
                'verbose_name': 'Lecture Program',
                'verbose_name_plural': 'Lecture Program',
            },
        ),
        migrations.CreateModel(
            name='CurriculumCourse',
            fields=[
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='Date created')),
                ('date_modified', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='Date modified')),
                ('is_deleted', models.BooleanField(default=False, editable=False)),
                ('semester_number', models.CharField(choices=[('1', '1'), ('2', '2'), ('3', '3'), ('4', '4'), ('5', '5'), ('6', '6'), ('7', '7'), ('8', '8')], default='1', max_length=1, verbose_name='Semester')),
                ('semester_type', models.CharField(choices=[('1', 'Odd'), ('2', 'Even')], default='1', max_length=1, verbose_name='Odd/Event')),
                ('sks_meeting', models.PositiveIntegerField(default=0, verbose_name='SKS Meeting')),
                ('sks_practice', models.PositiveIntegerField(default=0, verbose_name='SKS Practice')),
                ('sks_field_practice', models.PositiveIntegerField(default=0, verbose_name='SKS Field')),
                ('sks_simulation', models.PositiveIntegerField(default=0, verbose_name='SKS Simulation')),
                ('sks_total', models.PositiveIntegerField(default=0, editable=False, verbose_name='SKS Total')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_curriculums', to='academic.Course', verbose_name='Course')),
                ('curriculum', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='curriculum_courses', to='academic.Curriculum', verbose_name='Curriculum')),
            ],
            options={
                'verbose_name': 'Curricullum Course',
                'verbose_name_plural': 'Curricullum Courses',
                'ordering': ('curriculum', 'semester_number'),
                'unique_together': {('curriculum', 'course')},
            },
        ),
        migrations.CreateModel(
            name='CoursePreRequisite',
            fields=[
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='Date created')),
                ('date_modified', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='Date modified')),
                ('is_deleted', models.BooleanField(default=False, editable=False)),
                ('score', models.CharField(choices=[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D'), ('E', 'E')], default='C', max_length=2, verbose_name='Min Graduated Score')),
                ('course', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_prerequisites', to='academic.Course', verbose_name='Course')),
                ('requisite', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='prerequisites', to='academic.Course', verbose_name='Requisite')),
            ],
            options={
                'verbose_name': 'Course Pre Requisite',
                'verbose_name_plural': 'Course Pre Requisite',
            },
        ),
        migrations.AddField(
            model_name='course',
            name='course_group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='academic.CourseGroup', verbose_name='Course group'),
        ),
        migrations.AddField(
            model_name='course',
            name='course_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='academic.CourseType', verbose_name='Course type'),
        ),
        migrations.AddField(
            model_name='course',
            name='rmu',
            field=mptt.fields.TreeForeignKey(help_text='Resource Management Unit', on_delete=django.db.models.deletion.PROTECT, related_name='courses', to='academic.ResourceManagementUnit', verbose_name='RMU'),
        ),
        migrations.CreateModel(
            name='AcademicYear',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='Date created')),
                ('date_modified', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='Date modified')),
                ('is_deleted', models.BooleanField(default=False, editable=False)),
                ('code', models.CharField(editable=False, max_length=256, unique=True, verbose_name='Code')),
                ('semester', models.CharField(choices=[('1', 'Odd'), ('2', 'Even'), ('P', 'Short')], default='1', max_length=2, verbose_name='Semester')),
                ('date_start', models.DateField(verbose_name='Date start')),
                ('date_end', models.DateField(verbose_name='Date end')),
                ('school_year', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='academic.SchoolYear', verbose_name='School year')),
            ],
            options={
                'verbose_name': 'Academic Year',
                'verbose_name_plural': 'Academic Years',
            },
        ),
        migrations.CreateModel(
            name='AcademicActivity',
            fields=[
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='Date created')),
                ('date_modified', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='Date modified')),
                ('is_deleted', models.BooleanField(default=False, editable=False)),
                ('date_start', models.DateField(verbose_name='Date start')),
                ('date_end', models.DateField(verbose_name='Date end')),
                ('activity', wagtail.core.fields.RichTextField(verbose_name='Activity')),
                ('academic_year', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.PROTECT, related_name='semester_activities', to='academic.AcademicYear', verbose_name='Semester Year')),
                ('rmu', mptt.fields.TreeForeignKey(help_text='Resource Management Unit', on_delete=django.db.models.deletion.PROTECT, to='academic.ResourceManagementUnit', verbose_name='RMU')),
                ('school_year', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.PROTECT, related_name='academic_activities', to='academic.SchoolYear', verbose_name='Academic Year')),
            ],
            options={
                'verbose_name': 'Academic Activity',
                'verbose_name_plural': 'Academic Activities',
                'ordering': ('-date_start',),
            },
        ),
        migrations.CreateModel(
            name='ProgramStudy',
            fields=[
            ],
            options={
                'verbose_name': 'Program Study',
                'verbose_name_plural': 'Program Studies',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('academic.resourcemanagementunit',),
        ),
        migrations.AddField(
            model_name='curriculum',
            name='rmu',
            field=mptt.fields.TreeForeignKey(help_text='Resource Management Unit', on_delete=django.db.models.deletion.PROTECT, to='academic.ProgramStudy', verbose_name='Program Study'),
        ),
        migrations.CreateModel(
            name='CourseEqualizer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='Date created')),
                ('date_modified', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='Date modified')),
                ('is_deleted', models.BooleanField(default=False, editable=False)),
                ('sks_old_course', models.IntegerField(verbose_name='SKS Old')),
                ('sks_new_course', models.IntegerField(verbose_name='SKS New')),
                ('new_course', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='new_courses', to='academic.CurriculumCourse', verbose_name='New Course')),
                ('old_course', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='old_courses', to='academic.CurriculumCourse', verbose_name='Old Course')),
            ],
            options={
                'verbose_name': 'Course Equalizer',
                'verbose_name_plural': 'Course Equalizers',
                'unique_together': {('old_course', 'new_course')},
            },
        ),
    ]
