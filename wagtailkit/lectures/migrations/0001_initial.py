# Generated by Django 2.2.10 on 2020-02-20 17:28

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import modelcluster.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('teachers', '0003_auto_20200217_0336'),
        ('rooms', '0002_auto_20200217_0336'),
        ('students', '0003_conversionscore_studentscore'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('academic', '0002_auto_20200217_0336'),
    ]

    operations = [
        migrations.CreateModel(
            name='Lecture',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date created')),
                ('date_modified', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='Date modified')),
                ('is_deleted', models.BooleanField(default=False, editable=False)),
                ('code', models.CharField(max_length=128, verbose_name='Code')),
                ('date_start', models.DateField(default=django.utils.timezone.now, verbose_name='Date start')),
                ('default_time_start', models.TimeField(default=django.utils.timezone.now, verbose_name='Time start')),
                ('duration', models.PositiveIntegerField(help_text='Lecture duration in minutes', verbose_name='Duration')),
                ('series', models.PositiveIntegerField(help_text='Total Meet Up', verbose_name='Series')),
                ('status', models.CharField(choices=[('PND', 'Pending'), ('ONG', 'On Going'), ('END', 'End')], default='PND', max_length=3, verbose_name='Status')),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='academic.AcademicYear', verbose_name='Academic Year')),
                ('assistant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='lecture_assistant', to='teachers.Teacher', verbose_name='Assistant')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='academic.CurriculumCourse', verbose_name='Course')),
                ('creator', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('rmu', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='academic.ResourceManagementUnit', verbose_name='Program Study')),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='rooms.Room', verbose_name='Room Name')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lecture_teacher', to='teachers.Teacher', verbose_name='Teacher')),
            ],
            options={
                'verbose_name': 'Lecture',
                'verbose_name_plural': 'Lectures',
            },
        ),
        migrations.CreateModel(
            name='LectureScoreWeighting',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date created')),
                ('date_modified', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='Date modified')),
                ('is_deleted', models.BooleanField(default=False, editable=False)),
                ('attendance', models.PositiveIntegerField(default=15, verbose_name='Attendance')),
                ('homework1', models.PositiveIntegerField(default=10, verbose_name='Homework 1')),
                ('homework2', models.PositiveIntegerField(default=10, verbose_name='Homework 2')),
                ('quis1', models.PositiveIntegerField(default=10, verbose_name='Quis 1')),
                ('quis2', models.PositiveIntegerField(default=10, verbose_name='Quis 2')),
                ('mid_exam', models.PositiveIntegerField(default=20, verbose_name='Mid Exam')),
                ('final_exam', models.PositiveIntegerField(default=25, verbose_name='Final Exam')),
                ('creator', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('lecture', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='lectures.Lecture', verbose_name='Lecture')),
            ],
            options={
                'verbose_name': 'Lecture Score Weighting',
                'verbose_name_plural': 'Lecture Score Weightings',
            },
        ),
        migrations.CreateModel(
            name='LectureScore',
            fields=[
                ('studentscore_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='students.StudentScore')),
                ('attendance', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Attendance')),
                ('homework1', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Homework 1')),
                ('homework2', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Homework 2')),
                ('quis1', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Quis 1')),
                ('quis2', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Quis 2')),
                ('mid_exam', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Mid Exam')),
                ('final_exam', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Final Exam')),
                ('total_score', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Total Score')),
                ('lecture', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='lectures.Lecture', verbose_name='Lecture')),
            ],
            options={
                'verbose_name': 'Lecture Score',
                'verbose_name_plural': 'Lecture Scores',
            },
            bases=('students.studentscore',),
        ),
        migrations.CreateModel(
            name='LectureSchedule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date created')),
                ('date_modified', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='Date modified')),
                ('is_deleted', models.BooleanField(default=False, editable=False)),
                ('session', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(50)], verbose_name='Session')),
                ('date', models.DateField(default=django.utils.timezone.now, verbose_name='Date')),
                ('time_start', models.TimeField(default=django.utils.timezone.now, verbose_name='Time start')),
                ('time_end', models.TimeField(default=django.utils.timezone.now, verbose_name='Time end')),
                ('type', models.CharField(choices=[('1', 'Meeting'), ('2', 'E-Learning'), ('99', 'Subtitution'), ('3', 'Mid Exam'), ('4', 'Final Exam')], default='1', max_length=3, verbose_name='Type')),
                ('lecture', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lectures.Lecture', verbose_name='Lecture')),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='rooms.Room', verbose_name='Room Name')),
            ],
            options={
                'verbose_name': 'Lecture Schedule',
                'verbose_name_plural': 'Lecture Schedules',
            },
        ),
        migrations.CreateModel(
            name='LectureStudent',
            fields=[
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date created')),
                ('date_modified', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='Date modified')),
                ('is_deleted', models.BooleanField(default=False, editable=False)),
                ('status', models.CharField(choices=[('N', 'New'), ('R', 'Repeat')], default='N', max_length=3, verbose_name='Status')),
                ('lecture', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='students', to='lectures.Lecture', verbose_name='Lecture')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lectures', to='students.Student', verbose_name='Student')),
            ],
            options={
                'verbose_name': 'Lecture Student',
                'verbose_name_plural': 'Lecture Students',
                'unique_together': {('lecture', 'student')},
            },
        ),
    ]
