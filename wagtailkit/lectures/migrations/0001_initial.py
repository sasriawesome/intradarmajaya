# Generated by Django 2.2.8 on 2020-01-19 19:29

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import mptt.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('academic', '0005_auto_20200119_1324'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('persons', '0001_initial'),
        ('rooms', '__first__'),
    ]

    operations = [
        migrations.CreateModel(
            name='Faculty',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date created')),
                ('date_modified', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date modified')),
                ('fid', models.CharField(max_length=128, unique=True, verbose_name='Teacher ID')),
                ('is_nidn', models.BooleanField(default=False, verbose_name='ID is NIDN')),
                ('is_active', models.BooleanField(default=False, verbose_name='Active status')),
                ('courses', models.ManyToManyField(to='academic.CurriculumCourse', verbose_name='Courses')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('homebase', mptt.fields.TreeForeignKey(on_delete=django.db.models.deletion.PROTECT, to='academic.ProgramStudy', verbose_name='Homebase')),
                ('person', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='persons.Person', verbose_name='Person')),
            ],
            options={
                'verbose_name': 'Teacher',
                'verbose_name_plural': 'Teachers',
            },
        ),
        migrations.CreateModel(
            name='Lecture',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date created')),
                ('date_modified', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date modified')),
                ('code', models.CharField(max_length=128, verbose_name='Code')),
                ('name', models.CharField(max_length=128, verbose_name='Name')),
                ('semester', models.CharField(choices=[('odd', 'Odd'), ('even', 'Even'), ('short', 'Short')], default='odd', max_length=4, verbose_name='Semester')),
                ('date_start', models.DateField(default=django.utils.timezone.now, verbose_name='Date start')),
                ('default_time_start', models.TimeField(default=django.utils.timezone.now, verbose_name='Time start')),
                ('duration', models.PositiveIntegerField(help_text='Lecture duration in minutes', verbose_name='Duration')),
                ('series', models.PositiveIntegerField(help_text='Total Meet Up', verbose_name='Series')),
                ('status', models.CharField(choices=[('PND', 'Pending'), ('ONG', 'On Going'), ('END', 'End')], default='PND', max_length=3, verbose_name='Status')),
                ('assistant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='lecture_assistant', to='lectures.Faculty', verbose_name='Assistant')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='academic.CurriculumCourse', verbose_name='Course')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('faculty', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lecture_faculty', to='lectures.Faculty', verbose_name='Teacher')),
                ('school_year', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='academic.SchoolYear', verbose_name='School year')),
            ],
            options={
                'verbose_name': 'Lecture',
                'verbose_name_plural': 'Lectures',
            },
        ),
        migrations.CreateModel(
            name='LectureSchedule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date created')),
                ('date_modified', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date modified')),
                ('reg_number', models.PositiveIntegerField(blank=True, null=True, verbose_name='Register number')),
                ('inner_id', models.CharField(blank=True, max_length=50, null=True, unique=True, verbose_name='Inner ID')),
                ('session', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(50)], verbose_name='Session')),
                ('date', models.DateField(default=django.utils.timezone.now, verbose_name='Date')),
                ('time_start', models.TimeField(default=django.utils.timezone.now, verbose_name='Time start')),
                ('time_end', models.TimeField(default=django.utils.timezone.now, verbose_name='Time end')),
                ('lecture', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lectures.Lecture', verbose_name='Lecture')),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='rooms.Room', verbose_name='Room Name')),
            ],
            options={
                'verbose_name': 'Lecture Schedule',
                'verbose_name_plural': 'Lecture Scehdules',
            },
        ),
        migrations.CreateModel(
            name='PersonAsFaculty',
            fields=[
            ],
            options={
                'verbose_name': 'Person',
                'verbose_name_plural': 'Persons',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('persons.person',),
        ),
        migrations.CreateModel(
            name='PersonAsStudent',
            fields=[
            ],
            options={
                'verbose_name': 'Persons',
                'verbose_name_plural': 'Persons',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('persons.person',),
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date created')),
                ('date_modified', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date modified')),
                ('is_active', models.BooleanField(default=False, verbose_name='Active status')),
                ('person', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='persons.Person', verbose_name='Person')),
                ('program_study', mptt.fields.TreeForeignKey(on_delete=django.db.models.deletion.PROTECT, to='academic.ProgramStudy', verbose_name='Program Study')),
            ],
            options={
                'verbose_name': 'Student',
                'verbose_name_plural': 'Students',
            },
        ),
        migrations.CreateModel(
            name='LectureStudent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date created')),
                ('date_modified', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date modified')),
                ('status', models.CharField(choices=[('N', 'New'), ('R', 'Repeat')], default='N', max_length=3, verbose_name='Status')),
                ('lecture', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lectures.Lecture', verbose_name='Lecture')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lectures.Student', verbose_name='Student')),
            ],
            options={
                'verbose_name': 'Lecture Student',
                'verbose_name_plural': 'Lecture Students',
            },
        ),
        migrations.CreateModel(
            name='LectureScoreWeighting',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date created')),
                ('date_modified', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date modified')),
                ('attendance', models.PositiveIntegerField(default=0, verbose_name='Attendance')),
                ('homework1', models.PositiveIntegerField(default=0, verbose_name='Homework 1')),
                ('homework2', models.PositiveIntegerField(default=0, verbose_name='Homework 2')),
                ('quis1', models.PositiveIntegerField(default=0, verbose_name='Quis 1')),
                ('quis2', models.PositiveIntegerField(default=0, verbose_name='Quis 2')),
                ('mid_exam', models.PositiveIntegerField(default=0, verbose_name='Mid Exam')),
                ('final_exam', models.PositiveIntegerField(default=0, verbose_name='Final Exam')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('lecture', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='lectures.Lecture', verbose_name='Lecture')),
            ],
            options={
                'verbose_name': 'Lecture Score Weighting',
                'verbose_name_plural': 'Lecture Score Weightings',
            },
        ),
        migrations.CreateModel(
            name='StudentScore',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date created')),
                ('date_modified', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date modified')),
                ('attendance', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Attendance')),
                ('homework1', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Homework 1')),
                ('homework2', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Homework 2')),
                ('quis1', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Quis 1')),
                ('quis2', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Quis 2')),
                ('mid_exam', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Mid Exam')),
                ('final_exam', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Final Exam')),
                ('lecture', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lectures.Lecture', verbose_name='Lecture')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lectures.LectureStudent', verbose_name='Lecture student')),
            ],
            options={
                'verbose_name': 'Student Score',
                'verbose_name_plural': 'Student Scores',
                'unique_together': {('lecture', 'student')},
            },
        ),
        migrations.CreateModel(
            name='LectureTeacherAttendant',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date created')),
                ('date_modified', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date modified')),
                ('note', models.CharField(blank=True, max_length=512, null=True, verbose_name='Note')),
                ('faculty', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lectures.Faculty', verbose_name='Teacher')),
                ('schedule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lectures.LectureSchedule', verbose_name='Schedule')),
            ],
            options={
                'verbose_name': 'Lecture Teacher Attendant',
                'verbose_name_plural': 'Lecture Teacher Attendants',
                'unique_together': {('schedule', 'faculty')},
            },
        ),
        migrations.CreateModel(
            name='LectureStudentAttendant',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date created')),
                ('date_modified', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date modified')),
                ('status', models.CharField(choices=[('PR', 'Present'), ('SC', 'Sick'), ('AB', 'Absent'), ('PR', 'Permit')], default='PR', max_length=3, verbose_name='Status')),
                ('note', models.CharField(blank=True, max_length=512, null=True, verbose_name='Note')),
                ('schedule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lectures.LectureSchedule', verbose_name='Schedule')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lectures.Student', verbose_name='Student')),
            ],
            options={
                'verbose_name': 'Lecture Student Attendant',
                'verbose_name_plural': 'Lecture Student Attendants',
                'unique_together': {('schedule', 'student')},
            },
        ),
    ]
